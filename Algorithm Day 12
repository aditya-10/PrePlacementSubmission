Climbing Stairs

class Solution {
public:
    int climbStairs(int n) {
        if(n==1) return 1;
        vector<int> dp(n+1);
        dp[0]=0,dp[1]=1,dp[2]=2;
        for(int i=3;i<=n;i++)
            dp[i]=dp[i-1]+dp[i-2];
        
        return dp[n];
    }
};

House Robber

class Solution {
public:
    int rob(vector<int>& A) {
        if(size(A) == 1) return A[0];
        vector<int> dp(A);
        dp[1] = max(A[0], A[1]);
        for(int i = 2; i < size(A); i++)
            dp[i] = max(dp[i-1], A[i] + dp[i-2]);
        return dp.back();
    }
};

Triangle

class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int n = triangle.size();
    vector<int> minlen(triangle.back());
    for (int layer = n-2; layer >= 0; layer--) 
    {
        for (int i = 0; i <= layer; i++) 
        {
            minlen[i] = min(minlen[i], minlen[i+1]) + triangle[layer][i]; 
        }
    }
    return minlen[0];
    }
};
